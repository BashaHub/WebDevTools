"use client";
import { faker } from "@faker-js/faker";
import React, { useState, useEffect } from "react";
import Search from "@/app/assets/search";
import Button from "./components/Button";
import { fakerListType } from "./constants/fakerConstants";
import Modal from "./components/Modal";

export default function JsonGenerator() {
  const [showModal, setShowModal] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  //restrict to 1000
  const [rowNumber, setRowNumber] = useState(10);
  const [chosenRow, setChosenRow] = useState("");
  const [jsonList, setJsonList] = useState([
    {
      fieldName: "address",
      type: "location.street",
      typeLabel: "Street Address",
    },
    { fieldName: "email", type: "internet.email", typeLabel: "Email" },
  ]);
  const [jsonData, setJsonData] = useState([]);

  const dummy = {
    fieldName: "address",
    type: "location.street",
    typeLabel: "Street Address",
  };

  const onPreview = () => {
    onGenerate();
    setShowPreview(true);
  };

  const onGenerate = () => {
    // it first takes a string (fakerMethod) representing the path to a specific method in the faker object
    // string looks something like "name.firstName" or "internet.email"
    function generateData(fakerMethod) {
      // string is split into parts using '.' as a delimiter
      // each part represents a level in the faker library's object structure
      const methodParts = fakerMethod.split(".");
      let result = faker;
      // then iteratively accesses properties of the faker object using the parts obtained from the split string
      for (const part of methodParts) {
        // if a function is encountered, it's executed
        // if the specified path leads to a valid method
        // it returns the result of calling this method
        if (typeof result[part] === "function") {
          result = result[part]();
        } else if (result[part]) {
          result = result[part];
        } else {
          //throws an error indicating the method was not found
          throw new Error(`Faker method not found: ${fakerMethod}`);
        }
      }
      return result;
    }

    function transformInputData() {
      // initializes an empty array combinedData to store the generated rows of data
      let combinedData = [];
      // for each row (up to rowNumber), it maps over jsonList
      for (let i = 0; i < rowNumber; i++) {
        // for each item in jsonList, it generates a new object with a key based on item.fieldName and a value generated by calling generateData(item.type)
        // bascially creating a single object for each field with the mock data
        const transformedData = jsonList.map((item) => ({
          [item.fieldName]: generateData(item.type),
        }));
        // these objects are then combined into a single object representing a row of data using Object.assign({}, ...transformedData) and pushed into combinedData
        combinedData.push(Object.assign({}, ...transformedData));
      }

      //return the data
      return combinedData;
    }
    //convert the data to json file, and download it to users' browser
    const data = transformInputData();
    setJsonData(data);

    // const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(
    //   JSON.stringify(data)
    // )}`;
    // const link = document.createElement("a");
    // link.href = jsonString;
    // link.download = "data.json";
    // link.click();
  };

  const onDownload = () => {
    onGenerate();

    const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(
      JSON.stringify(jsonData)
    )}`;
    const link = document.createElement("a");
    link.href = jsonString;
    link.download = "data.json";
    link.click();
  };

  return (
    <main>
      {/* nav bar */}
      <nav className="bg-blue-500 py-4 px-6 flex items-center justify-between h-15">
        <a
          href="https://web-dev-tools.vercel.app/"
          className="mr-2 flex border rounded items-center p-2 hover:bg-blue-600"
        >
          <h1 className="text-white text-[18px] md:text-2xl font-bold mr-4">
            Web Dev Tools
          </h1>
          <p>Json Generator</p>
        </a>
        <Search />
      </nav>

      {/* body */}
      <div className="flex justify-center align-top">
        <div className="flex-1 relative overflow-x-auto m-3">
          {/* table */}
          <table className="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
            <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
              <tr>
                <th scope="col" className="px-6 py-3">
                  Field Name
                </th>
                <th scope="col" className="px-6 py-3">
                  Type
                </th>
                <th scope="col" className="px-6 py-3">
                  Option
                </th>
              </tr>
            </thead>
            <tbody>
              {jsonList.map((item, i) => {
                return (
                  <tr
                    key={i}
                    className="bg-white border-b dark:bg-gray-800 dark:border-gray-700"
                  >
                    <th
                      scope="row"
                      className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white"
                    >
                      <input
                        type="text"
                        id="paragraphs"
                        value={item.fieldName}
                        min={1}
                        className="focus:outline-none bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                        required
                        max={10}
                        onChange={(e) => {
                          setJsonList(
                            jsonList.map((item, index) => {
                              if (i === index) {
                                return { ...item, fieldName: e.target.value };
                              }
                              return item;
                            })
                          );
                        }}
                      />
                    </th>
                    <td className="px-6 py-4">
                      <Button
                        onClick={() => {
                          setChosenRow(i);
                          setShowModal(true);
                        }}
                        title={item.typeLabel}
                      />
                    </td>
                    <td className="px-6 py-4">
                      <Button
                        onClick={() => {
                          setJsonList(
                            jsonList.filter((obj, index) => index !== i)
                          );
                        }}
                        title={"Delete"}
                      />

                      <Button
                        onClick={() => {
                          if (i < jsonList.length - 1) {
                            let newArr = [...jsonList];
                            [newArr[i], newArr[i + 1]] = [
                              newArr[i + 1],
                              newArr[i],
                            ];
                            setJsonList(newArr);
                          }
                        }}
                        title={"down"}
                        size="small"
                      />
                      <Button
                        onClick={() => {
                          if (i > 0) {
                            let newArr = [...jsonList];
                            [newArr[i], newArr[i - 1]] = [
                              newArr[i - 1],
                              newArr[i],
                            ];
                            setJsonList(newArr);
                          }
                        }}
                        title={"up"}
                        size="small"
                      />
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
          <div className="pb-11">
            <Button
              onClick={() => {
                setJsonList([...jsonList, dummy]);
              }}
              title="Add Field"
              size="large"
            />
          </div>
        </div>
        <Modal
          title={"Preview the Json File"}
          showModal={showPreview}
          setShowModal={setShowPreview}
          // content={<pre>{JSON.stringify(jsonData, null, 2)}</pre>}
          content={
            <div>
              <div className="flex flex-row">
                <h1 className="italic m-5">
                  Below is the first 100 lines of code:
                </h1>
                <Button
                  onClick={() => {
                    navigator.clipboard.writeText(
                      JSON.stringify(jsonData, null, 2)
                    );
                  }}
                  title={"Copy"}
                  size={"small"}
                />
              </div>
              <pre>
                {JSON.stringify(jsonData, null, 2)
                  .split("\n")
                  .slice(0, 100)
                  .join("\n")}
              </pre>
            </div>
          }
        />
        <Modal
          title={"Choose a Type"}
          showModal={showModal}
          setShowModal={setShowModal}
          content={fakerListType.map((obj) => {
            return (
              <div
                onClick={() => {
                  setJsonList(
                    jsonList.map((item, index) => {
                      if (chosenRow === index) {
                        return {
                          ...item,
                          type: obj.function,
                          typeLabel: obj.typeLabel,
                        };
                      }
                      return item;
                    })
                  );
                  setShowModal(false);
                }}
                className="hover:bg-sky-700"
              >
                <h2 className="font-semibold text-lg ">{obj.typeLabel}</h2>
                <p className="text-sm">{obj.typeDescription}</p>
              </div>
            );
          })}
        />
      </div>

      {/* the footer */}
      <div className="fixed bottom-0 left-0 right-0 mt-5 bg-slate-700 flex justify-center ">
        <Button
          onClick={onDownload}
          title={"Generate JSON Data"}
          size="large"
        />
        <Button onClick={onPreview} title={"Preview"} size="large" />
        <div></div>
        <div className="mt-4">Row Number:</div>
        <input
          placeholder="Row Number"
          type="number"
          value={rowNumber}
          className="m-2 text-black text-center p-2 border border-gray-300 rounded"
          onChange={(e) => {
            if (+e.target.value <= 1000) {
              setRowNumber(+e.target.value);
            } else {
              setRowNumber(1000);
            }
          }}
        />
      </div>
    </main>
  );
}
